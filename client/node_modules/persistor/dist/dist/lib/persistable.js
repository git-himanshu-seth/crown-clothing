"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var supertype_1 = require("supertype");
var Persistor = /** @class */ (function (_super) {
    __extends(Persistor, _super);
    function Persistor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @TODO: was typed `Persistor` but that's weird? doesn't work need to figure out what's going on.
     */
    Persistor.create = function () { return undefined; };
    ;
    Persistor.prototype.beginDefaultTransaction = function () { };
    Persistor.prototype.beginTransaction = function (nodefault) { };
    Persistor.prototype.endTransaction = function (persistorTransaction, logger) { };
    Persistor.prototype.begin = function (isdefault) { };
    Persistor.prototype.end = function (persistorTransaction, logger) { };
    ;
    Persistor.prototype.setDirty = function (obj, txn, onlyIfChanged, noCascade, logger) { };
    ;
    Persistor.prototype.setAsDeleted = function (obj, txn, onlyIfChanged) { };
    ;
    Persistor.prototype.saveAll = function (txn, logger) { return undefined; };
    ;
    Persistor.prototype.setDB = function (db, type, alias) { };
    ;
    Persistor.prototype.getPOJOFromQuery = function (template, query, options, logger) { };
    Persistor.prototype.commit = function (options) { };
    ;
    Persistor.prototype.getPersistorProps = function () { };
    Persistor.prototype.connect = function (connect, schema) { };
    Persistor.prototype.dropAllTables = function () { };
    Persistor.prototype.syncAllTables = function () { };
    Persistor.prototype.onAllTables = function (callback, concurrency) { };
    Persistor.prototype.countFromKnexQuery = function (template, queryOrChains, _logger) { };
    Persistor.prototype.dropKnexTable = function (template) { };
    ;
    Persistor.prototype.synchronizeKnexTableFromTemplate = function (template, changeNotificationCallback, forceSync) { };
    ;
    Persistor.prototype.setSchema = function (schema) { };
    ;
    Persistor.prototype.appendSchema = function (schema) { };
    ;
    Persistor.prototype.performInjections = function () { };
    Persistor.createTransientObject = function (callback) { };
    ;
    return Persistor;
}(supertype_1.SupertypeSession));
exports.Persistor = Persistor;
function ContainsPersistable(Base) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return class_1;
    }(Base));
}
exports.ContainsPersistable = ContainsPersistable;
function Persistable(Base) {
    return /** @class */ (function (_super) {
        __extends(class_2, _super);
        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // New names
        class_2.persistorDeleteByQuery = function (query, options) { };
        class_2.persistorFetchByQuery = function (query, options) { };
        class_2.persistorCountByQuery = function (query, options) { };
        class_2.persistorFetchById = function (id, options) { };
        class_2.persistorIsKnex = function () { };
        class_2.persistorGetTableName = function (alias) { };
        class_2.persistorGetParentKey = function (prop, alias) { };
        class_2.persistorGetPrimaryKey = function (alias) { };
        class_2.persistorGetChildKey = function (prop, alias) { };
        class_2.persistorGetKnex = function () { };
        class_2.persistorKnexParentJoin = function (targetTemplate, primaryAlias, targetAlias, joinKey) { };
        class_2.persistorKnexChildJoin = function (targetTemplate, primaryAlias, targetAlias, joinKey) { };
        class_2.prototype.persistorSave = function (options) { };
        ;
        class_2.prototype.persistorRefresh = function (logger) { };
        class_2.prototype.persistorDelete = function (options) { };
        ;
        class_2.prototype.persistorIsStale = function () { };
        class_2.prototype.generateId = function () { };
        ;
        // Legacy
        class_2.getFromPersistWithId = function (id, cascade, isTransient, idMap, isRefresh, logger) { };
        class_2.getFromPersistWithQuery = function (query, cascade, start, limit, isTransient, idMap, options, logger) { };
        class_2.deleteFromPersistWithQuery = function (query, txn, logger) { };
        class_2.deleteFromPersistWithId = function (id, txn, logger) { };
        class_2.countFromPersistWithQuery = function (query, logger) { };
        class_2.getTableName = function (alias) { };
        class_2.getParentKey = function (prop, alias) { };
        class_2.getPrimaryKey = function (alias) { };
        class_2.getChildKey = function (prop, alias) { };
        class_2.getKnex = function () { };
        class_2.isKnex = function () { };
        class_2.knexParentJoin = function (targetTemplate, primaryAlias, targetAlias, joinKey) { };
        class_2.knexChildJoin = function (targetTemplate, primaryAlias, targetAlias, joinKey) { };
        class_2.prototype.fetchProperty = function (prop, cascade, queryOptions, isTransient, idMap, logger) { };
        class_2.prototype.fetch = function (cascade, isTransient, idMap, logger) { };
        class_2.prototype.fetchReferences = function (options) { };
        class_2.prototype.persistSave = function (txn, logger) { };
        class_2.prototype.persistTouch = function (txn, logger) { };
        class_2.prototype.persistDelete = function (txn, logger) { };
        class_2.prototype.cascadeSave = function (any) { };
        class_2.prototype.isStale = function () { };
        class_2.prototype.persist = function (options) { };
        class_2.prototype.setDirty = function (txn, onlyIfChanged, noCascade, logger) { };
        class_2.prototype.setAsDeleted = function (txn, onlyIfChanged) { };
        class_2.prototype.refresh = function (logger) { };
        ;
        class_2.prototype.getTableName = function () { };
        class_2.prototype.getParentKey = function () { };
        return class_2;
    }(Base));
}
exports.Persistable = Persistable;
